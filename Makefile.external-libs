
HEADERS = src/Variant.h \
	  src/split.h \
	  src/join.h

SOURCES = src/Variant.cpp \
	  src/split.cpp

OBJECTS =	$(SOURCES:.cpp=.o)
BIN_DIR =	bin

VCF_LIB_LOCAL :=	$(shell pwd)

# TODO
#vcfstats.cpp

BIN_SOURCES =	src/vcfecho.cpp \
		src/vcfaltcount.cpp \
		src/vcfhetcount.cpp \
		src/vcfhethomratio.cpp \
		src/vcffilter.cpp \
		src/vcf2tsv.cpp \
		src/vcfgenotypes.cpp \
		src/vcfannotategenotypes.cpp \
		src/vcfcommonsamples.cpp \
		src/vcfremovesamples.cpp \
		src/vcfkeepsamples.cpp \
		src/vcfsamplenames.cpp \
		src/vcfgenotypecompare.cpp \
		src/vcffixup.cpp \
		src/vcfclassify.cpp \
		src/vcfsamplediff.cpp \
		src/vcfremoveaberrantgenotypes.cpp \
		src/vcfrandom.cpp \
		src/vcfparsealts.cpp \
		src/vcfstats.cpp \
		src/vcfflatten.cpp \
		src/vcfprimers.cpp \
		src/vcfnumalt.cpp \
		src/vcfcleancomplex.cpp \
		src/vcfintersect.cpp \
		src/vcfannotate.cpp \
		src/vcfallelicprimitives.cpp \
		src/vcfoverlay.cpp \
		src/vcfaddinfo.cpp \
		src/vcfkeepinfo.cpp \
		src/vcfkeepgeno.cpp \
		src/vcfafpath.cpp \
		src/vcfcountalleles.cpp \
		src/vcflength.cpp \
		src/vcfdistance.cpp \
		src/vcfrandomsample.cpp \
		src/vcfentropy.cpp \
		src/vcfglxgt.cpp \
		src/vcfroc.cpp \
		src/vcfcheck.cpp \
		src/vcfstreamsort.cpp \
		src/vcfuniq.cpp \
		src/vcfuniqalleles.cpp \
		src/vcfremap.cpp \
		src/vcf2fasta.cpp \
		src/vcfsitesummarize.cpp \
		src/vcfbreakmulti.cpp \
		src/vcfcreatemulti.cpp \
		src/vcfevenregions.cpp \
		src/vcfcat.cpp \
		src/vcfgenosummarize.cpp \
		src/vcfgenosamplenames.cpp \
		src/vcfgeno2haplo.cpp \
		src/vcfleftalign.cpp \
		src/vcfcombine.cpp \
		src/vcfgeno2alleles.cpp \
		src/vcfindex.cpp \
		src/vcf2dag.cpp \
		src/vcfsample2info.cpp \
		src/vcfqual2info.cpp \
		src/vcfinfo2qual.cpp \
		src/vcfglbound.cpp \
		src/vcfinfosummarize.cpp

# when we can figure out how to build on mac
# src/vcfsom.cpp

BINS =		$(addprefix bin/,$(notdir $(BIN_SOURCES:.cpp=)))
SHORTBINS =	$(notdir $(BIN_SOURCES:.cpp=))

# Use ?= to allow overriding from the env or command-line.

MAKE ?=		make
LOCALBASE ?=	/usr/local
LIB_PATH ?=	${LOCALBASE}/lib
INCLUDE_PATH ?=	${LOCALBASE}/include

CXX ?=		c++
CXXFLAGS ?=	-O3
CXXFLAGS +=	-D_FILE_OFFSET_BITS=64
#CXXFLAGS +=	-pedantic -Wall -Wshadow -Wpointer-arith -Wcast-qual

SSW =		src/ssw.o src/ssw_cpp.o

INCLUDES =	-I$(INCLUDE_PATH)
LDFLAGS =	-L. -lvcflib \
		-L$(LIB_PATH) -lsw -ltabix -lhts -lfastahack -lfilevercmp \
		-lpthread -lz -lm

all: $(OBJECTS) $(BINS)

ssw.o:		src/ssw.h
ssw_cpp.o:	src/ssw_cpp.h

openmp:
	$(MAKE) CXXFLAGS="$(CXXFLAGS) -fopenmp -D HAS_OPENMP"

profiling:
	$(MAKE) CXXFLAGS="$(CXXFLAGS) -g" all

gprof:
	$(MAKE) CXXFLAGS="$(CXXFLAGS) -pg" all

$(OBJECTS): $(SOURCES) $(HEADERS)
	$(CXX) -c -o $@ src/$(*F).cpp $(INCLUDES) $(CXXFLAGS) $(LDFLAGS)

$(SHORTBINS):
	$(MAKE) bin/$@

$(BINS): $(BIN_SOURCES) libvcflib.a $(OBJECTS) $(SSW)
	$(CXX) src/$(notdir $@).cpp -o $@ $(INCLUDES) $(CXXFLAGS) $(LDFLAGS)

libvcflib.a: $(OBJECTS) $(SMITHWATERMAN) $(SSW)
	ar rs libvcflib.a $(OBJECTS) $(SSW)

test: $(BINS)
	@prove -Itests/lib -w tests/*.t

clean:
	rm -f $(BINS) $(OBJECTS)
	rm -f ssw_cpp.o ssw.o
	rm -f libvcflib.a
	cd tabixpp && $(MAKE) clean
	cd smithwaterman && $(MAKE) clean
	cd fastahack && $(MAKE) clean

.PHONY: clean all test
